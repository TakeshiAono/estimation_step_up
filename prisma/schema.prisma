// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ticket {
  id        Int      @id @default(autoincrement())
  title     String
  url       String?
  status    Int
  totalTime Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  tasks     Task[]
}

model Task {
  id           Int           @id @default(autoincrement())
  isSurveyTask Boolean       @default(true)
  ticket       Ticket?       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId     Int?          @map("ticket_id")
  status       Int
  type         Int
  title        String?
  plans        Plan[]
  parent       Task?         @relation("children", fields: [parentId], references: [id])
  parentId     Int?          @map("parent_id")
  children     Task[]        @relation("children")
  achievements Achievement[]
  checks       Check[]
  feedbacks    Feedback[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
}

model Plan {
  id                            Int       @id @default(autoincrement())
  taskId                        Int       @map("task_id") @unique
  task                          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  predictionRequiredTimeOfFirst DateTime? @map("prediction_required_time_of_first")
  predictionRequiredTimeOfFinal DateTime? @map("prediction_required_time_of_final")
  predictionSurveyTimeOfFirst   DateTime? @map("prediction_survey_time_of_first")
  predictionSurveyTimeOfFinal   DateTime? @map("prediction_survey_time_of_second")
  surveyDetail                  String?   @map("survey_detail")
  createdAt                     DateTime  @default(now()) @map("created_at")
  updatedAt                     DateTime  @updatedAt @map("updated_at")
}

model Achievement {
  id            Int       @id @default(autoincrement())
  isDone        Boolean   @default(false)
  taskId        Int       @map("task_id") @unique
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  doneDate      DateTime? @map("done_date")
  surveyTime    Int?      @map("survey_time")
  operatingTime Int?      @map("operating_time")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
}

model Check {
  id        Int      @id @default(autoincrement())
  taskId    Int      @map("task_id") @unique
  analysis  String?
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Feedback {
  id           Int      @id @default(autoincrement())
  taskId       Int      @map("task_id") @unique
  issues       String?
  improvements String?
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
}

generator zod {
  provider         = "zod-prisma-types"
  // 自動生成されたファイルが配置されるパス
  output           = "../src/schema/zod"
  // ファイル分割の定義
  // useMultipleFiles                 = true // default is false
  createInputTypes = false // default is true
  // createModelTypes                 = false // default is true
  // addInputTypeValidation           = false // default is true
  // addIncludeType                   = false // default is true
  // addSelectType                    = false // default is true
  // validateWhereUniqueInput         = true // default is false
  // createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes        = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators             = false // default is true
  // coerceDate                       = false // default is true
  // writeNullishInModelTypes         = true // default is false
  // prismaClientPath                 = "./path/to/prisma/client" // default is client output path
}
