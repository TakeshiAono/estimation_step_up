// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO: 最終的にはuserにsettingを紐づける
model Setting {
  id                Int      @id @default(autoincrement())
  startBusinessTime DateTime @default("2024-01-01T10:00:00+09:00") @map("start_business_time")
  endBusinessTime   DateTime @default("2024-01-01T10:00:00+09:00") @map("end_business_time")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
}

model Ticket {
  id                 Int       @id @default(autoincrement())
  title              String
  isNotified         Boolean   @default(false)
  url                String?
  status             Int
  totalTime          Int       @default(0)
  calculatedDoneDate DateTime? @map("calculated_done_date")
  deadline           DateTime? @map("deadline")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  tasks              Task[]
}

model Task {
  id                               Int           @id @default(autoincrement())
  isSurveyTask                     Boolean       @default(true)
  ticket                           Ticket?       @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  operatedTermsJsonForTimeBarChart Json?         @map("operated_terms_json_for_time_bar_chart")
  ticketId                         Int?          @map("ticket_id")
  progressRate                     Int?          @map("progress_rate")
  status                           Int
  isNotified                       Boolean       @default(false)
  type                             Int
  title                            String?
  plans                            Plan[]
  parent                           Task?         @relation("children", fields: [parentId], references: [id])
  parentId                         Int?          @map("parent_id")
  children                         Task[]        @relation("children")
  achievements                     Achievement[]
  checks                           Check[]
  feedbacks                        Feedback[]
  createdAt                        DateTime      @default(now()) @map("created_at")
  updatedAt                        DateTime      @updatedAt @map("updated_at")
}

model Plan {
  id                            Int      @id @default(autoincrement())
  taskId                        Int      @unique @map("task_id")
  task                          Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  predictionRequiredTimeOfFirst Int?     @map("prediction_required_time_of_first")
  predictionRequiredTimeOfFinal Int?     @map("prediction_required_time_of_final")
  predictionSurveyTimeOfFirst   Int?     @map("prediction_survey_time_of_first")
  predictionSurveyTimeOfFinal   Int?     @map("prediction_survey_time_of_second")
  surveyDetail                  String?  @map("survey_detail")
  createdAt                     DateTime @default(now()) @map("created_at")
  updatedAt                     DateTime @updatedAt @map("updated_at")
}

model Achievement {
  id            Int       @id @default(autoincrement())
  isDone        Boolean   @default(false)
  taskId        Int       @unique @map("task_id")
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  doneDate      DateTime? @map("done_date")
  surveyTime    Int?      @map("survey_time")
  operatingTime Int?      @map("operating_time")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  histories     History[]
}

model History {
  // TODO: isActiveはいらないかも
  id            Int          @id @default(autoincrement())
  isActive      Boolean      @default(true)
  achivementId  Int          @map("achivement_id")
  achievement   Achievement? @relation(fields: [achivementId], references: [id], onDelete: Cascade)
  surveyTime    Int?         @map("survey_time")
  operatingTime Int?         @map("operating_time")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
}

model Check {
  id        Int      @id @default(autoincrement())
  taskId    Int      @unique @map("task_id")
  analysis  String?
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Feedback {
  id           Int      @id @default(autoincrement())
  taskId       Int      @unique @map("task_id")
  issues       String?
  improvements String?
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
}

generator zod {
  provider                  = "zod-prisma-types"
  // 自動生成されたファイルが配置されるパス
  output                    = "../src/schema/zod"
  // ファイル分割の定義
  // useMultipleFiles                 = true // default is false
  createInputTypes          = false // default is true
  // createModelTypes                 = false // default is true
  // addInputTypeValidation           = false // default is true
  // addIncludeType                   = false // default is true
  // addSelectType                    = false // default is true
  // validateWhereUniqueInput         = true // default is false
  // createOptionalDefaultValuesTypes = true // default is false
  createRelationValuesTypes = true // default is false
  // createPartialTypes               = true // default is false
  // useDefaultValidators             = false // default is true
  // coerceDate                       = false // default is true
  // writeNullishInModelTypes         = true // default is false
  // prismaClientPath                 = "./path/to/prisma/client" // default is client output path
}
